interface IPathCheckFuncs {
    [index: string]: (value: string) => boolean;
}

export function {{name}}Requests($httpBackend: ng.IHttpBackendService) {
    const chance = new ExtendedChance();

    {{#methods}}
    /*-- Mock for: {{httpVerb}} {{{link}}} --*/
    $httpBackend.when(
        '{{httpVerb}}',
        (url: string): boolean => {
            let result = true;
            const pathSegments = '{{{link}}}'.split("/");
            const pathCheckFuncs: IPathCheckFuncs = {
                {{#pathParameters}}
                {{name}}: (value: string) => { {{#isNumber}}return !isNaN(Number(value));{{/isNumber}}{{^isNumber}}return true;{{/isNumber}} },
                {{/pathParameters}}
            };
            let urlSegments = url.split("/");
            if (pathSegments.length != urlSegments.length) {
                result = false;
            } else {
                for (let i = 0; i < pathSegments.length; i++) {
                    let pathSegment = pathSegments[i];
                    let urlSegment = urlSegments[i];
                    if (pathSegment[0] != "{") {
                        if (pathSegment != urlSegment) result = false;
                    } else {
                        let pathIndex = pathSegment.slice(1, -1);
                        if (!pathCheckFuncs[pathIndex](urlSegment)) result = false;
                    }
                }
            }
            result = {{name}}RequestsOverride.{{operationId}}.UrlCheck(url, result);
            return result;
        },
        (data: string): boolean => {
            let result = true;
            result = {{name}}RequestsOverride.{{operationId}}.DataCheck(data, result);
            return result;
        },
        (headers: Object): boolean => {
            let result = true;
            result = {{name}}RequestsOverride.{{operationId}}.HeadersCheck(headers, result);
            return result;
        }
    ).respond((method: string, url: string, data: string | Object, headers: Object): [number, string | Object, Object, string] => {
        let result: [number, string | Object, Object, string] = [200, {{#response}}chance.{{content}}(){{/response}}{{^response}}undefined{{/response}}, undefined, undefined];
        result = {{name}}RequestsOverride.{{operationId}}.Response(method, url, data, headers, result);
        return result;
    });
    
    {{/methods}}
}

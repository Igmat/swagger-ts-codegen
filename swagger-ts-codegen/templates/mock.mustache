export function {{name}}Requests($httpBackend: ng.IHttpBackendService) {
    const chance = new ExtendedChance();

    {{#methods}}
    /*-- Mock for: {{httpVerb}} {{{link}}} --*/
    const {{operationId}}CheckOptions: MockHelpers.IUrlMatchOptions = {
        PathSegments: '{{{link}}}'.split("/"),
        PathCheckFuncs: {
            {{#pathParameters}}
            {{name}}: (value: string) => { {{#isNumber}}return !isNaN(Number(value));{{/isNumber}}{{^isNumber}}return true;{{/isNumber}} },
            {{/pathParameters}}
        },
        QueryCheckFuncs: {
            {{#queryParameters}}
            {{name}}: (value: any) => {
            {{#optional}}return true;{{/optional}}{{^optional}}if (value == undefined) return false;
            {{#isNumber}}return !isNaN(Number(value));{{/isNumber}}{{^isNumber}}return true;{{/isNumber}}{{/optional}}
            },
            {{/queryParameters}}
        }
    }

    $httpBackend.when(
        '{{httpVerb}}',
        (url: string): boolean => {
            return MockHelpers.IsUrlMatches(url, {{operationId}}CheckOptions);
        },
        (data: string): boolean => {
            return true;
        },
        (headers: Object): boolean => {
            return true;
        }
    ).respond((method: string, url: string, data: string | Object, headers: Object): [number, string | Object, Object, string] => {
        let result: [number, string | Object, Object, string] = [200, {{#response}}chance.{{content}}(){{/response}}{{^response}}undefined{{/response}}, undefined, undefined];
        result = {{name}}RequestsOverride.{{operationId}}(method, url, data, headers, result);
        return result;
    });
    
    {{/methods}}
}
